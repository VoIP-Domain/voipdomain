;;
;; VoIP Domain global configurations
;;
#include voipdomain/configs/dialplan-globals.conf
#include voipdomain/configs/dialplan-configs-*.conf

;;
;; System profiles
;;
#include voipdomain/configs/dialplan-profile-*.conf

;;
;; Gateways inbound contexts
;;
#include voipdomain/configs/dialplan-gateway-*.conf

;;
;; Local server Asterisk databases
;;
[VoIPDomain-Database]
#include voipdomain/configs/dialplan-db-*.conf

;;
;; Local server extensions
;;
[VoIPDomain-Extensions]
#include voipdomain/configs/dialplan-extension-*.conf

;;
;; Local server extension hints
;;
[VoIPDomain-Hints]
#include voipdomain/configs/dialplan-hint-*.conf

;;
;; Global exceptions
;;
[VoIPDomain-Exceptions]
#include voipdomain/configs/dialplan-exception-*.conf

;;
;; Global blocks
;;
[VoIPDomain-blocks]
#include voipdomain/configs/dialplan-block-*.conf

;;
;; Server ranges
;;
[VoIPDomain-ranges]
#include voipdomain/configs/dialplan-range-*.conf

;;
;; Global IVR's
;;
#include voipdomain/configs/dialplan-ivr-*.conf

;;
;; VoIP Domain services
;;
[VoIPDomain-Services]
; Direct extension pickup (used into BLF phones)
exten => _*8.,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: VoIPDomain functions - Direct extension pickup for ${EXTEN:2} from ${CALLERID(num)})
 same => n,ExecIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,extension_${EXTEN:2})}" != "1"]?HangUp())
 same => n,GoSub(VoIPDomain-Database,extension_${EXTEN:2},1(_,dialstring))
 same => n,PickupChan(${vd_dialstring})
 same => n,HangUp()

exten => h,1,Set(CDR(server)=${SERVER})
 same => n,Set(CDR(sourcetype)=$[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_EXTENSION}])
 same => n,Set(CDR(calltype)=$[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_SERVICES}])
 same => n,Set(CDR(nativecodec)=${CHANNEL(audionativeformat)})
 same => n,Set(CDR(readcodec)=${CHANNEL(audioreadformat)})
 same => n,Set(CDR(writecodec)=${CHANNEL(audiowriteformat)})
 same => n,ExecIf($["${CHANNEL(channeltype)}" = "PJSIP"]?Set(CDR(QOS)=${CHANNEL(rtcp,all_jitter)}${CHANNEL(rtcp,all_loss)}${CHANNEL(rtcp,all_rtt)}${CHANNEL(rtcp,all)}))
 same => n,ExecIf($["${CHANNEL(hangupsource)}" = "${CHANNEL(name)}"]?Set(CDR(WhoHungUp)=Caller):Set(CDR(WhoHungUp)=Called))
 same => n,Set(CDR(SIPID)=${CHANNEL(pjsip,call-id)})

;;
;; VoIP Domain transhipment handling
;;
[VoIPDomain-Transhipment]
include => VoIPDomain-Hints

exten => _Z.,1,NoCDR()
 same => n,ExecIf(${DB_EXISTS(denylist-${EXTEN}/${CALLERID(num)})}?HangUp())
; ***TODO***: Aqui tem que decidir se vai ter transbordo para ramais internos de outros servidores... e implementar, lógico!
 same => n,ExecIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,extension_${EXTEN})}" != "1"]?HangUp())
 same => n,GoSub(VoIPDomain-Database,extension_${EXTEN},1)
 same => n,Wait(${TRANSTIME})
 same => n,Dial(${dialstring},${MATH(${DIALTIME}-${TRANSTIME},int)},tTrcU(handler-VoIPDomain-pre-bridge))
 same => n,HangUp()

;;
;; VoIP Domain direct handling
;;
[VoIPDomain-Direct]
include => VoIPDomain-Hints

exten => _Z.,1,NoCDR()
 same => n,ExecIf(${DB_EXISTS(denylist-${EXTEN}/${CALLERID(num)})}?HangUp())
; ***TODO***: Aqui tem que decidir se vai ter transbordo para ramais internos de outros servidores... e implementar, lógico!
 same => n,ExecIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,extension_${EXTEN})}" != "1"]?HangUp())
 same => n,GoSub(VoIPDomain-Database,extension_${EXTEN},1)
 same => n,Dial(${vd_dialstring},${MATH(${DIALTIME}-${TRANSTIME},int)},tTrcU(handler-VoIPDomain-pre-bridge))
 same => n,HangUp()

;;
;; VoIP Domain internal extensions only
;;
[VoIPDomain-Internal]
include => VoIPDomain-Extensions

exten => *20,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Called agent login application from ${CALLERID(num)})
 same => n,Ringing()
 same => n,Wait(2)
 same => n,Answer()
 same => n(getagent),GoSub(VoIPDomain-Tools,get_digits,1(agent,agent-user,4,10,1))
 same => n,GoToIf($["${AGENT(${agent})}" = ""]?notfound)
 same => n,GoToIf($["${AGENT(${agent})}" = "LOGGEDIN"]?logged)
 same => n,GoTo(getpass)
 same => n(notfound),PlayBack(agent-incorrect)
 same => n,GoTo(getagent)
 same => n(logged),PlayBack(agent-alreadyon)
 same => n,HangUp()
 same => n(getpass),GoSub(VoIPDomain-Tools,get_digits,1(password,agent-pass,6,10,1,0))
 same => n,AGI(agi://127.0.0.1:1234/agents_password,${agent},${password})
 same => n,GoToIf($["${AGENTCHECK}" != "1"]?invalid)
 same => n,AgentLogin(${agent},s)
 same => n,PlayBack(agent-loginok)
 same => n,HangUp()
 same => n(invalid),PlayBack(vm-invalidpassword)
 same => n,GoTo(getpass)

exten => _*20XXXX,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Called agent login application from ${CALLERID(num)} to agent ${EXTEN:3})
 same => n,Ringing()
 same => n,Wait(2)
 same => n,Answer()
 same => n,GoToIf($["${AGENT(${EXTEN:3})}" = ""]?notfound)
 same => n,GoToIf($["${AGENT(${EXTEN:3})}" = "LOGGEDIN"]?logged)
 same => n,Set(agent=${EXTEN:3})
 same => n,GoTo(*20,getpass)
 same => n(notfound),PlayBack(agent-incorrect)
 same => n,HangUp()
 same => n(logged),PlayBack(agent-alreadyon)
 same => n,HangUp()

;;
;; VoIP Domain dialplan tools
;;
[VoIPDomain-Tools]
;;
;; Counter tool
;;
;
; This tool is usefull to count how many times an action was triggered in a
; certain time. Everytime you call it, it will increment the counter, and if
; provided a time (in seconds), it will return how many times this tool was
; called from current time minus the seconds provided. It's usefull to check for
; flood, restrict some resource usage, avoid abuse, etc.
;
; Usage:
; GoSub(VoIPDomain-Tools,counter,1(_VARIABLE_[,_TIMEOUTSECS_[,_KEEPOLD_]]))
;
; Arguments:
; _VARIABLE_: The unique variable name of the counter. The tool will create a
;             database entry named VoIPDomain-counter/_VARIABLE_, with a string
;             containing a comma separated timestamp of each event.
; _TIMEOUTSECS_ (optional): If provided, will make tool return the number of
;                           times it was called. You can access the result at
;                           ${GOSUB_RETVAL} variable.
; _KEEPOLD_ (optional): If provided, any content except empty, will make the tool
;                       to not clear the expired timestamps. Everytime you call
;                       this tool with _TIMEOUTSECS_ seconds, it keep only
;                       timestamps that are still valid.
;
exten => counter,1,ExecIf($["${ARG1}" = ""]?Return())
 same => n,Set(vd_entries=${DB(VoIPDomain-counter/${ARG1})})
 same => n,ExecIf($["${ARG2}" = ""]?Set(PUSH(DB(VoIPDomain-counter/${ARG1}))=${EPOCH}))
 same => n,ExecIf($["${ARG2}" = ""]?Return())
 same => n,Set(vd_newentries=)
 same => n,While($["${SET(vd_var=${SHIFT(vd_entries)})}" != ""])
 same => n,ExecIf($[${vd_var} > $[${EPOCH} - ${ARG2}]]?Set(PUSH(vd_newentries)=${vd_var}))
 same => n,EndWhile
 same => n,GoToIf($["${ARG3}" != ""]?dontclear:clear)
 same => n(dontclear),Set(PUSH(DB(VoIPDomain-counter/${ARG1}))=${EPOCH})
 same => n,Return(${FIELDQTY(vd_newentries,\,)})
 same => n(clear),Set(PUSH(vd_newentries)=${EPOCH})
 same => n,Set(DB(VoIPDomain-counter/${ARG1})=${vd_newentries})
 same => n,Return($[${FIELDQTY(vd_newentries,\,)} - 1])

;;
;; Call extension tool
;;
;
; This tool will do all the checks and will dial to a system extension, wherever
; they're on the network and to all accounts attached to the required extension,
; respecting follow-me, transhipment, etc.
;
; Usage:
; GoSub(VoIPDomain-Tools,call_extension,1(_EXTENSION_)
;
; Arguments:
; _EXTENSION_: The number of the destination extension.
;
exten => call_extension,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: VoIPDomain functions - Call to extension ${ARG1} from ${CALLERID(num)})
 same => n,GoToIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,extension_${ARG1})}" != "1"]?novars)
 same => n,GoSub(VoIPDomain-Database,extension_${ARG1},1)
 same => n,Set(CDR(calltype)=$[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_EXTENSION}])
 same => n,Set(CDR(gateway)=)
 same => n,Set(CDR(value)=0)
 same => n,Set(CDR(processed)=1)
 same => n,Set(CHANNEL(hangup_handler_push)=VoIPDomain-Tools,set_cdr,1)
 same => n,ExecIf($["${PJSIP_HEADERS(read,X-No-CDR)}" != ""]?NoCDR())
 same => n,ExecIf($["${vd_dialstring}" = ""]?Congestion())
 same => n,GoToIf(${DB_EXISTS(denylist-${ARG1}/${CALLERID(num)})}?denylist)
 same => n,GoSubIf($["${vd_transhipment}" != ""]?transhipment)
 same => n,Set(DB(lastcallerid/${ARG1})=${CALLERID(num)})
 same => n,ExecIf($[${LEN(${CALLERID(num)})} >= 6]?Set(infotype=external):Set(infotype=internal))
 same => n,Dial(${vd_dialstring},${DIALTIME},etrU(handler-VoIPDomain-pre-bridge)b(VoIPDomain-Tools^call_extension^addheader_${infotype}))
 same => n,GoToIf($[${DB_EXISTS(CFBS/${ARG1})} & $["${DIALSTATUS}" != "CANCEL"]]?followme)
 same => n,GoTo(end)

 same => n(denylist),Set(CDR(userfield)=denylist)
 same => n,Ringing()
 same => n,Wait(${DIALTIME})
 same => n,ExecIf($[${VM_INFO(${ARG1},exists)}]?Voicemail(${ARG1},u))
 same => n,HangUp()
 same => n,Return()

 same => n(transhipment),ChanIsAvail(${vd_dialstring},as)
 same => n,ExecIf($["${REGEX("(^|&)1($|&)" ${AVAILSTATUS})}" = "1"]?Set(context=Transhipment):Set(context=Direct))
 same => n(cut),ExecIf($["${FIELDQTY(vd_transhipment,\,)}" = "0"]?Return())
 same => n,Set(vd_dialstring=${vd_dialstring}&LOCAL/${CUT(vd_transhipment,\,,1)}@VoIPDomain-Transhipment)
 same => n,Set(vd_transhipment=${CUT(vd_transhipment,\,,2-)})
 same => n,GoTo(cut)

 same => n(novars),Verbose(1,                          `--> Failed, no extension variables found!)
 same => n,Return()

 same => n(end),ExecIf($[$["${DIALSTATUS}" = "CANCEL"] & $[${VM_INFO(${ARG1},exists)}]]?HangUp())
 same => n,ExecIf($[$["${DIALSTATUS}" = "BUSY"] & $[${VM_INFO(${ARG1},exists)}]]?Voicemail(${ARG1},b))
 same => n,ExecIf($[$["${DIALSTATUS}" = "NOANSWER"] & $[${VM_INFO(${ARG1},exists)}]]?Voicemail(${ARG1},u))
 same => n,ExecIf($[$["${DIALSTATUS}" = "CHANUNAVAIL"] & $[${VM_INFO(${ARG1},exists)}]]?Voicemail(${ARG1},u))
 same => n,HangUp()
 same => n,Return()

 same => n(addheader_external),Set(PJSIP_HEADER(add,Alert-Info)=<http://localhost/>\;info=external)
 same => n,Return()

 same => n(addheader_internal),Set(PJSIP_HEADER(add,Alert-Info)=<http://localhost/>\;info=internal)
 same => n,Return()

;;
;; CIDA (Caller ID Announcement) tool
;;
;
; This tool is used to announce the desired number (usually the Caller ID number)
; to the called party. This is usefull to vision impaired people, or to
; extensions that need to know the Caller ID and has no display.
;
; Usage:
; GoSub(VoIPDomain-Tools,announce,1(_NUMBER_[,_MAXLENGTH_]))
;
; Arguments:
; _NUMBER_: The number to be announced.
; _MAXLENGTH_: The max length of the number. If greater than, will just return.
;
exten => announce,1,ExecIf($["${DB_EXISTS(CIDA/${CALLERID(num)})}" = "0"]?Return())
 same => n,ExecIf($[$["${ARG2}" != ""] -a $[${LEN(${ARG1})} >= ${ARG2}]]?Return())
 same => n,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Announcing ${ARG1} to ${CALLERID(num)})
 same => n,Wait(.5)
 same => n,SayDigits(${ARG1})
 same => n,PlayTones(1000/250)
 same => n,Wait(.25)
 same => n,StopPlaytones()
 same => n,Return()

;;
;; Call cost tool
;;
;
; This tool is used to calculate the cost of a call, and set extended CDR
; variables. All variables are got from the current call, no argument is needed.
;
; Usage:
; GoSub(VoIPDomain-Tools,call_cost,1)
;
exten => call_cost,1,ExecIf($["${e164}" = ""]?Set(e164=${MASTER_CHANNEL(CALLERID(dnid))}))
 same => n,NoOp(Checking call cost from ${CALLERID(num)} to ${e164})
 same => n,Set(CDR(processed)=1)
 same => n,GoToIf($["${MATH(${CDR(calltype)}AND${VD_CALLENDPOINT_EXTENSION},int)}" = "${VD_CALLENDPOINT_EXTENSION}"]?cost-extension)
 same => n,Set(CDR(gateway)=${c_gateway})
 same => n,GoToIf($["${MATH(${CDR(calltype)}AND${VD_CALLENDPOINT_TOLLFREE},int)}" = "${VD_CALLENDPOINT_TOLLFREE}"]?cost-free)
 same => n,GoToIf($[$["${ANSWEREDTIME}" = ""] | $[${ANSWEREDTIME} <= ${c_discard}]]?cost-free)
 same => n,ExecIf($[${ANSWEREDTIME} <= ${c_minimum}]?Set(c_total=${c_minimum}):Set(c_total=$[CEIL(${MATH(${ANSWEREDTIME}/${c_fraction})})*${c_fraction}]))
 same => n,Set(CDR(value)=${MATH(${c_total}*${MATH(${c_cost}/60)})})
 same => n,GoTo(cost-end)
 same => n(cost-extension),Set(CDR(gateway)=0)
 same => n(cost-free),Set(CDR(value)=0.000000)
 same => n,GoTo(cost-end)
 same => n(cost-end),Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Call cost from ${CALLERID(num)} to ${e164} (via gateway ${CDR(gateway)}): ${CDR(value)})
 same => n,Return()

;;
;; Agent password check tool
;;
;
; This tool is used to check for an agent password. As Asterisk removed the
; password from agents file, we use an external AGI application to check for
; the agent password.
; The result will be available at ${GOSUB_RETVAL} variable. 0 means not match,
; and 1 means password match.
;
; Usage:
; GoSub(VoIPDomain-Tools,agents_password,1(_AGENT_NUMBER_,_AGENT_PASSWORD_))
;
; Arguments:
; _AGENT_NUMBER_: The agent identification number.
; _AGENT_PASSWORD_: The agent password.
;
; TODO: reescrever esta função, pois tem database de agente agora com a senha! 
exten => agents_password,1,AGI(agi://127.0.0.1:1234/agents_password,${ARG1},${ARG2})
 same => n,Return(${AGENTCHECK})

;;
;; Get user digits tool
;;
;
; This tool reads a certain number of digits, replying back what digit was
; pressed. You can also specify an audio file to play.
;
; Usage:
; GoSub(VoIPDomain-Tools,get_digits,1(_VARIABLE_,_AUDIO_,_DIGITS_,_TIMEOUT_,[_IGNOREHASH_,[_SAYDIGIT_,[_STATUSVARIABLE_]]]))
;
; Arguments:
; _VARIABLE_: The variable name to store the entered digits.
; _AUDIO_: If wanted, the audio file to be played as background while wait for
;          the first digit.
; _DIGITS_: The number of digits. 0 is unlimited, if so, the user must press # to
;           finish.
; _TIMEOUT_: The timeout in secods.
; _IGNOREHASH_: Ignore # (parameter must be "yes" or "no"), when number of digits
;               are not zero. Default to "no".
; _SAYDIGIT_: Play back to user the received digit. Default to "yes".
; _STATUSVARIABLE_: The variable name to store the status, if provided.
;                   Status could be:
;                     - OK
;                     - ERROR
;                     - HANGUP
;                     - INTERRUPTED
;                     - SKIPPED
;                     - TIMEOUT
;
exten => get_digits,1,Set(${ARG1}=)
 same => n,Set(lastdigit=${ARG2})
 same => n,Set(size=${ARG3})
 same => n,Set(timeout=${ARG4})
 same => n,Set(ignorehash=$["${ARG5}" = "yes"])
 same => n,Set(saydigit=$[$["${ARG6}" = ""] | $["${ARG6}" = "yes"]])
 same => n,ExecIf($[$[${size} = 0] & $[${ignorehash} = 1]]?Set(ignorehash=0))
 same => n,NoOp(Reading ${size} digits to $${ARG1})
 same => n,Set(digits=)
 same => n(digit),Read(digit,${lastdigit},1,s,1,${timeout})
 same => n,ExecIf($["${ARG7}" != ""]?Set(${ARG7}=${READSTATUS}))
 same => n,GoToIf($["${READSTATUS}" != "OK"]?return)
 same => n,ExecIf($[$["${digit}" != ""] & $["${digit}" != "*"]]?Set(digits=${digits}${digit}))
 same => n,GoToIf($[$["${digit}" = ""] & $[${ignorehash} = 0]]?return)
 same => n,GoToIf($[$["${size}" != "0"] & $[${LEN(${digits})} = ${size}]]?sayandreturn)
 same => n,ExecIf($[$[${saydigit}] & $["${digit}" != ""] & $["${digit}" != "*"]]?Set(lastdigit=digits/${digit}):Set(lastdigit=))
 same => n,GoTo(digit)
 same => n(sayandreturn),ExecIf($[$[${saydigit}] & $["${digit}" != ""] & $["${digit}" != "*"]]?PlayBack(digits/${digit}))
 same => n(return),Set(${ARG1}=${digits})
 same => n,Return()

;;
;; Dial to external destination tool
;;
;
; This tool will analyze an external call request, check for extension
; permissions, gateways, and do the call.
;
; Usage:
; GoSub(VoIPDomain-Tools,call_external,1(_DESTINATION_,_CALLTYPE_))
;
; Arguments:
; _DESTINATION_: Destination number (if geographic, an E.164 number, otherwise
;                just the local number)
; _CALLTYPE_: The call type bitwise value, respecting the globals call type
;             definitions.
;
exten => call_external,1,Set(CDR(server)=${SERVER})
 same => n,Set(CDR(calltype)=${ARG2})
 same => n,GoToIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,extension_${CALLERID(num)})}" != "1"]?noroute)
 same => n,GoSub(VoIPDomain-Database,extension_${CALLERID(num)},1)
 same => n,GoToIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,group_${vd_group})}" != "1"]?noroute)
 same => n,GoSub(VoIPDomain-Database,group_${vd_group},1(_,profile))
 same => n,GoSub(VoIPDomain-Database,group_${vd_group},1(_default,costcenter))
 same => n,ExecIf($["${vd_costcenter}" = ""]?Set(vd_costcenter=${default_vd_costcenter}))
 same => n,GoToIf($["${DIALPLAN_EXISTS(VoIPDomain-Database,profile_${vd_profile})}" != "1"]?noroute)
 same => n,GoSub(VoIPDomain-Database,profile_${vd_profile},1)
 same => n,GoToIf($["${ARG1:0:1}" = "+"]?geographic:nongeographic)
 same => n(nongeographic),Set(CDR(gateway)=${vd_nggw})
 same => n,GoToIf($["${vd_nggw}" = ""]?noroute)
 same => n,Set(permission=)
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_SERVICES}]]?Set(permission=${vd_p_landline_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_SPECIAL}]]?Set(permission=${vd_p_prn_local}))
 same => n,GoToIf($["${permission}" = ""]?noroute)
 same => n,GoToIf($["${permission}" = "y"]?dialnggw)
 same => n,GoSub(getpass)
 same => n,GoTo(dialnggw)

 same => n(dialnggw),Set(CHANNEL(hangup_handler_push)=VoIPDomain-Tools,set_cdr,1)
 same => n,Set(DB(lastcalled/${CALLERID(num)})=${ARG1})
 same => n,Dial(PJSIP/vd_gateway_${vd_nggw}/${ARG1},${DIALTIME},TrCU(handler-VoIPDomain-pre-bridge))
 same => n,GoTo(end)

 same => n(geographic),GoToIf($["${vd_defaultgw}" = ""]?noroute)
 same => n,GoToIf($["${DIALPLAN_EXISTS(VoIPDomain-Exceptions,${ARG1})}" = "1"]?dialgeographic)
 same => n,Set(permission=)
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_LANDLINE}]]?Set(permission=${vd_p_landline_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_MOBILE}]]?Set(permission=${vd_p_mobile_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_MARINE}]]?Set(permission=${vd_p_marine_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_TOLLFREE}]]?Set(permission=${vd_p_tollfree_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_SPECIAL}]]?Set(permission=${vd_p_prn_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_LOCAL} + ${VD_CALLENDPOINT_SATELLITE}]]?Set(permission=${vd_p_satellite_local}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERSTATE} + ${VD_CALLENDPOINT_LANDLINE}]]?Set(permission=${vd_p_landline_interstate}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERSTATE} + ${VD_CALLENDPOINT_MOBILE}]]?Set(permission=${vd_p_mobile_interstate}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERSTATE} + ${VD_CALLENDPOINT_MARINE}]]?Set(permission=${vd_p_marine_interstate}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_LANDLINE}]]?Set(permission=${vd_p_landline_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_MOBILE}]]?Set(permission=${vd_p_mobile_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_MARINE}]]?Set(permission=${vd_p_marine_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_TOLLFREE}]]?Set(permission=${vd_p_tollfree_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_SPECIAL}]]?Set(permission=${vd_p_prn_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_SATELLITE}]]?Set(permission=${vd_p_satellite_international}))
 same => n,ExecIf($[${ARG2} = $[${VD_CALLTYPE_INTERNATIONAL} + ${VD_CALLENDPOINT_UNKNOWN}]]?Set(permission=${vd_p_mobile_international}))
 same => n,GoToIf($["${permission}" = ""]?noroute)
 same => n,GoToIf($["${permission}" = "y"]?dialgeographic)
 same => n,GoSub(getpass)
 same => n,GoTo(dialgeographic)

 same => n(dialgeographic),Set(CHANNEL(hangup_handler_push)=VoIPDomain-Tools,set_cdr,1)
 same => n,Set(DB(lastcalled/${CALLERID(num)})=${ARG1})
 same => n,AGI(agi://${AGIADDR}/lcr,${ARG1},"${vd_defaultgw}","${vd_blockedgw}")
 same => n,Set(gw=0)
 same => n,Set(PJSIP_HEADER(add,X-Orig-URI)=${CALLERID(num)}@${SERVERADDR})
 same => n(nextgw),Set(gw=$[${gw} + 1])
 same => n,GoToIf($["${r_${gw}_gw}" = ""]?fail)
 same => n,Set(c_gateway=${r_${gw}_gw})
 same => n,Set(c_discard=${r_${gw}_td})
 same => n,Set(c_minimum=${r_${gw}_tm})
 same => n,Set(c_fraction=${r_${gw}_tf})
 same => n,Set(c_cost=${r_${gw}_cm})
 same => n,Dial(PJSIP/${r_${gw}_dial}@vd_gateway_${c_gateway},${DIALTIME},etrU(handler-VoIPDomain-pre-bridge))
 same => n,GoToIf($["${DIALSTATUS}" = "ANSWER"]?end)
 same => n,GoToIf($["${DIALSTATUS}" = "CHANUNAVAIL"]?nextgw)
 same => n,GoToIf($["${DIALSTATUS}" = "CONGESTION"]?nextgw)
 same => n,GoTo(fail)

 same => n(fail),Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Call failed from ${CALLERID(num)} to ${ARG1}: ${DIALSTATUS})
 same => n,GoTo(end)

 same => n(getpass),Ringing()
 same => n,Wait(2)
 same => n,Answer()
 same => n,Set(tries=0)
 same => n(nexttry),Set(tries=$[${tries} + 1])
 same => n,ExecIf($[${tries} = 1]?Set(audio=agent-pass):Set(audio=auth-incorrect))
 same => n,GoSub(VoIPDomain-Tools,get_digits,1(password,${audio},6,10,1,0))
 same => n,ExecIf($["${password}" = "${vd_password}"]?Return())
 same => n,GoToIf($[${tries} < 3]?nexttry)
 same => n,PlayBack(auth-thankyou)
 same => n,GoTo(end)

 same => n(noroute),Set(CDR(processed)=1)
 same => n,Set(CDR(value)=0)
 same => n,Congestion()
 same => n,GoTo(end)

 same => n(end),HangUp()

;;
;; CDR extended informations setting tool
;;
;
; This tool will extend CDR informations to add internal VoIP Domain variables,
; and also, CODEC used, QOS statistics of the call, calculate the cost of the
; call (if needed), and other informations. This is usefull to be used as a
; hangup handler.
;
; Usage:
; GoSub(VoIPDomain-Tools,set_cdr,1)
;
exten => set_cdr,1,Set(CDR(server)=${SERVER})
 same => n,Set(CDR(nativecodec)=${CHANNEL(audionativeformat)})
 same => n,Set(CDR(readcodec)=${CHANNEL(audioreadformat)})
 same => n,Set(CDR(writecodec)=${CHANNEL(audiowriteformat)})

;; Description of RTCP variables: https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Function_CHANNEL

 same => n,ExecIf($[$["${CHANNEL(channeltype)}" = "PJSIP"] & $["${DIALSTATUS}" != ""]]?Set(CDR(QOS)=${CHANNEL(rtcp,all_jitter)}${CHANNEL(rtcp,all_loss)}${CHANNEL(rtcp,all_rtt)}${CHANNEL(rtcp,all)}))
 same => n,ExecIf($["${CHANNEL(hangupsource)}" = "${CHANNEL(name)}"]?Set(CDR(WhoHungUp)=Caller):Set(CDR(WhoHungUp)=Called))
 same => n,Set(CDR(SIPID)=${CHANNEL(pjsip,call-id)})
 same => n,ExecIf($["${c_cost}" != ""]?GoSub(VoIPDomain-Tools,call_cost,1)
; same => n,GoSub(handler-VoIPDomain-hangup,s,1)
 same => n,Return()

;exten => set_cdr,1,Set(MASTER_CHANNEL(CDR(server))=${SERVER})
; same => n,Set(MASTER_CHANNEL(CDR(nativecodec))=${CHANNEL(audionativeformat)})
; same => n,Set(MASTER_CHANNEL(CDR(readcodec))=${CHANNEL(audioreadformat)})
; same => n,Set(MASTER_CHANNEL(CDR(writecodec))=${CHANNEL(audiowriteformat)})
;
;;; Description of RTCP variables: https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Function_CHANNEL
;
; same => n,ExecIf($[$["${CHANNEL(channeltype)}" = "PJSIP"] & $["${DIALSTATUS}" != ""]]?Set(MASTER_CHANNEL(CDR(QOS))=${CHANNEL(rtcp,all_jitter)}${CHANNEL(rtcp,all_loss)}${CHANNEL(rtcp,all_rtt)}${CHANNEL(rtcp,all)}))
; same => n,ExecIf($["${CHANNEL(hangupsource)}" = "${CHANNEL(name)}"]?Set(MASTER_CHANNEL(CDR(WhoHungUp))=Caller):Set(MASTER_CHANNEL(CDR(WhoHungUp))=Called))
; same => n,Set(MASTER_CHANNEL(CDR(SIPID))=${CHANNEL(pjsip,call-id)})
; same => n,ExecIf($["${c_cost}" != ""]?GoSub(VoIPDomain-Tools,call_cost,1)
; same => n,GoSub(handler-VoIPDomain-hangup,s,1)
; same => n,Return()

;;
;; Blocked calls handling (denylist)
;;
;
; This tool will handle the incoming deny listed calls, setting CDR variables
; and handling the call.
;
; Usage:
; GoSub(VoIPDomain-Tools,blocked,1)
;
exten => blocked,1,GoSub(VoIPDomain-Tools,addflag,1(blocked))
 same => n,Ringing()
 same => n,Wait(${DIALTIME})
 same => n,ExecIf($[${VM_INFO(${CALLERID(num)},exists)}]?Voicemail(${CALLERID(num)},u))
 same => n,HangUp()
 same => n,Return()

;;
;; Call flags CDR variable handler
;;
;
; This tool will add a new flag to the call CDR flags variable.
;
; Usage:
; GoSub(VoIPDomain-Tools,addflag,1(_FLAG_))
;
; Arguments:
; _FLAG_: The new flag to be added
;
exten => addflag,1,ExecIf($["${MASTER_CHANNEL(CDR(flags))}" != ""]?Set(MASTER_CHANNEL(CDR(flags))=${MASTER_CHANNEL(CDR(flags))}|${ARG1}):Set(MASTER_CHANNEL(CDR(flags))=${ARG1}))
 same => n,Return()
