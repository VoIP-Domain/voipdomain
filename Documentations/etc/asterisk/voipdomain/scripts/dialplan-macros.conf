;;
;; Audible caller identification announce macro
;;
;; ARG1: Number to be announced
;;
[macro-Announce]
exten => s,1,ExecIf($["${DB_EXISTS(CIDA/${CALLERID(num)})}" = "0"]?MacroExit())
 same => n,NoOp(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Announcing ${ARG1} to ${CALLERID(num)})
 same => n,Wait(1)
 same => n,SayDigits(${ARG1})
 same => n,PlayTones(1004/250)
 same => n,Wait(.25)
 same => n,StopPlaytones()
 same => n,MacroExit()

;;
;; Macro to check extension password
;;
[macro-CheckPass]
exten => s,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Checking extension ${CALLERID(num)} password)
 same => n,Set(PWDexpiry=${DB(passexpiry/${CALLERID(num)})})
 same => n,GoToIf($["${PWDexpiry}" > "${STRFTIME(${EPOCH},,%s)}"]?passcache,1)
 same => n,Set(PWDtries=0)
 same => n,Ringing()
 same => n,Wait(1)
 same => n,Answer()
 same => n(readpass),Read(PWD,agent-pass,0,,3,15)
 same => n(readcheck),Set(PWDtries=${MATH(${PWDtries}+1,i)})
 same => n,GoToIf($["${PWD}" = "${p_password}"]?passok,1)
 same => n,Playback(vm-incorrect)
 same => n,GoToIf($["${PWDtries}" < "3"]?retry)
 same => n,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Invalid password (3 tries))
 same => n,Playback(vm-goodbye)
 same => n,Set(CDR(userfield)=passfail)
 same => n,HangUp()
 same => n(retry),Read(PWD,vm-reenterpassword,0,,3,15)
 same => n,GoTo(readcheck)

exten => passok,1,Set(DB(passexpiry/${CALLERID(num)})=${MATH(${STRFTIME(${EPOCH},,%s)}+600,i)})
 same => n,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Valid password, procedding call)
 same => n,ResetCDR(v)
 same => n,Set(CDR(userfield)=passok)
 same => n,MacroExit()

exten => passcache,1,Set(DB(passexpiry/${CALLERID(num)})=${MATH(${STRFTIME(${EPOCH},,%s)}+600,i)})
 same => n,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Cached password, procedding call)
 same => n,Set(CDR(userfield)=passcache)
 same => n,MacroExit()

;;
;; Macro to check extension password getting the extension number first
;;
[macro-CheckPassExtension]
exten => s,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Checking extension and extension password)
 same => n,Ringing()
 same => n,Wait(1)
 same => n,Answer()
 same => n,Read(number,agent-newlocation,0,,3,15)
 same => n,Macro(PeerVar,password,${number},p_password)
 same => n,GoToIf($["${password}" = ""]?passfail)
 same => n,Set(PWDtries=0)
 same => n(readpass),Read(PWD,access-password,0,,3,15)
 same => n(readcheck),Set(PWDtries=${MATH(${PWDtries}+1,i)})
 same => n,GoToIf($["${PWD}" = "${password}"]?passok,1)
 same => n,Playback(vm-incorrect)
 same => n,GoToIf($["${PWDtries}" < "3"]?retry)
 same => n,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Invalid password (3 tries) for extension ${number})
 same => n,Playback(vm-goodbye)
 same => n,Set(CDR(userfield)=passfail(${number}))
 same => n,HangUp()
 same => n(retry),Read(PWD,vm-reenterpassword,0,,3,15)
 same => n,GoTo(readcheck)

exten => passok,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Valid password to extension ${number}, procedding call)
 same => n,ResetCDR(v)
 same => n,Set(CDR(userfield)=passok(${number}))
 same => n,ExecIf($["${SIPPEER(u${number}-0,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-0,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-1,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-1,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-2,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-2,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-3,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-3,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-4,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-4,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-5,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-5,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-6,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-6,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-7,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-7,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-8,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-8,accountcode)}))
 same => n,ExecIf($["${SIPPEER(u${number}-9,accountcode)}" != ""]?Set(CDR(accountcode)=${SIPPEER(u${number}-9,accountcode)}))
 same => n,MacroExit()

exten => passfail,1,Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Invalid password to extension ${number})
 same => n,Playback(vm-incorrect)
 same => n,Playback(vm-goodbye)
 same => n,Set(CDR(userfield)=passfail(${number}))
 same => n,HangUp()

;;
;; Macro to recover a variable from any extension account
;;
;; ARG1: Variable name to be set
;; ARG2: Extension to be searched
;; ARG3: Parameter to be searched
;;
[macro-PeerVar]
exten => s,1,NoOp(Searching variable ${ARG3} of extension ${ARG2}, returning at $${ARG1})
 same => n,ExecIf($["${SIPPEER(u${ARG2}-0,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-0,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-1,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-1,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-2,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-2,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-3,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-3,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-4,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-4,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-5,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-5,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-6,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-6,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-7,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-7,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-8,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-8,chanvar[${ARG3}])}))
 same => n,ExecIf($["${SIPPEER(u${ARG2}-9,chanvar[${ARG3}])}" != ""]?Set(${ARG1}=${SIPPEER(u${ARG2}-9,chanvar[${ARG3}])}))

;;
;; Macro to call cost calculation
;;
[macro-CallCost]
exten => s,1,ExecIf($["${e164}" = ""]?Set(e164=${CALLERID(dnid)}))
 same => n,NoOp(Checking call cost from ${CALLERID(num)} to ${e164})
 same => n,GoToIf($["${calltype}" = "1"]?cost-extension)
 same => n,GoToIf($["${calltype}" = "2"]?cost-calc)
 same => n,GoToIf($["${calltype}" = "3"]?cost-calc)
 same => n,GoToIf($["${calltype}" = "4"]?cost-calc)
 same => n,GoToIf($["${calltype}" = "5"]?cost-calc)
 same => n,GoToIf($["${calltype}" = "6"]?cost-calc)
 same => n,GoToIf($["${calltype}" = "7"]?cost-free)
 same => n,GoToIf($["${calltype}" = "8"]?cost-free)
 same => n(cost-calc),Set(CDR(gateway)=${c_gateway})
 same => n,Set(CDR(processed)=1)
 same => n,GoToIf($["${ANSWEREDTIME}" = ""]?cost-free)
 same => n,GoToIf($[${ANSWEREDTIME} <= ${c_discard}]?cost-free)
 same => n,ExecIf($[${ANSWEREDTIME} <= ${c_minimum}]?Set(c_total=${c_minimum}):Set(c_total=$[CEIL(${MATH(${ANSWEREDTIME}/${c_fraction})})*${c_fraction}]))
 same => n,Set(CDR(value)=${MATH(${c_total}*${MATH(${c_cost}/60)})})
 same => n,GoTo(cost-end)
 same => n(cost-free),Set(CDR(gateway)=${c_gateway})
 same => n,Set(CDR(value)=0.000000)
 same => n,Set(CDR(processed)=1)
 same => n,GoTo(cost-end)
 same => n(cost-extension),Set(CDR(gateway)=0)
 same => n,Set(CDR(value)=0.000000)
 same => n,Set(CDR(processed)=1)
 same => n,GoTo(cost-end)
 same => n(cost-end),Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Call cost from ${CIDNUM} to ${e164} (via gateway ${CDR(gateway)}): ${CDR(value)})

;;
;; Macro getdigits
;;
;; Read a certain number of digits, replying back what digit was pressed.
;; ARG1: Variable name to be set
;; ARG2: Number of digits to read (0 is unlimited, wait for #)
;; ARG3: Timeout per digit
;; ARG4: Ignore # (yes or no) (only when digits are not 0)
;;
[macro-getdigits]
exten => s,1,Set(size=${ARG2})
 same => n,Set(timeout=${ARG3})
 same => n,Set(ignorehash=$["${ARG4}" = "yes"])
 same => n,ExecIf($[$[${size} = 0] & $[${ignorehash} = 1]]?Set(ignorehash=0))
 same => n,NoOp(Reading ${size} digits to $${ARG1})
 same => n,Set(lastdigit=)
 same => n(digit),Read(digit,${lastdigit},1,s,1,${timeout})
 same => n,GoToIf($["${READSTATUS}" != "OK"]?return)
 same => n,ExecIf($[$["${digit}" != ""] & $["${digit}" != "*"]]?Set(digits=${digits}${digit}))
 same => n,GoToIf($[$["${digit}" = ""] & $[${ignorehash} = 1]]?return)
 same => n,GoToIf($[$["${size}" != "0"] & $[${LEN(${digits})} = ${size}]]?sayandreturn)
 same => n,ExecIf($[$["${digit}" != ""] & $["${digit}" != "*"]]?Set(lastdigit=digits/${digit}):Set(lastdigit=))
 same => n,GoTo(digit)
 same => n(sayandreturn),ExecIf($[$["${digit}" != ""] & $["${digit}" != "*"]]?PlayBack(digits/${digit}))
 same => n(return),Set(${ARG1}=${digits})
 same => n,MacroExit()

;;
;; LCR (Least cost route) macro (E.164 format)
;;
;; Check for routes based on LCR to specified number and dial it.
;; ARG1: Number to be dialed (E.164 format)
;;
[macro-VoIPDomain-LCR]
exten => s,1,Set(e164=${ARG1})
 same => n,ResetCDR(v)
 same => n,NoOp(Least cost route from ${CALLERID(num)} to ${e164})
 same => n,AGI(agi://127.0.0.1:1234/lcr,${e164},"${DEFAULTGW}")
 same => n,Set(gw=0)
 same => n,Set(CIDNUM=${CALLERID(num)})
 same => n,SIPAddHeader(X-Orig-URI: ${CALLERID(num)}@${SERVERADDR})
 same => n(nextgw),Set(gw=$[${gw} + 1])
 same => n,GoToIf($["${r_${gw}_gw}" = ""]?fail)
 same => n,Set(c_gateway=${r_${gw}_gw})
 same => n,Set(c_discard=${r_${gw}_td})
 same => n,Set(c_minimum=${r_${gw}_tm})
 same => n,Set(c_fraction=${r_${gw}_tf})
 same => n,Set(c_cost=${r_${gw}_cm})
 same => n,Dial(SIP/${r_${gw}_dial}@gateway_${c_gateway},40,TrU(VoIPDomain-completed))
 same => n,GoToIf($["${DIALSTATUS}" = "CHANUNAVAIL"]?nextgw)
 same => n,GoToIf($["${DIALSTATUS}" = "CONGESTION"]?nextgw)
 same => n(fail),Verbose(1,${STRFTIME(${EPOCH},GMT+3,%c)}: Call failed from ${CIDNUM} to ${e164}: ${DIALSTATUS})
 same => n,HangUp()

; Extend CDR data
exten => h,1,Set(CDR(server)=${SERVER})
 same => n,Set(CDR(codec)=${CHANNEL(audionativeformat)})
 same => n,Set(CDR(QOSa)=${RTPAUDIOQOS})
 same => n,Set(CDR(QOSb)=${RTPAUDIOQOSBRIDGED})
 same => n,Set(CDR(SIPID)=${SIPCALLID})
 same => n,ExecIf($["${c_cost}" != ""]?Macro(CallCost))

;;
;; Call to non geographic locations (toll free, services, emergency, etc)
;;
;; Dial a NG call using NGGW configuration.
;; ARG1: Number to be dialed
;;
[macro-VoIPDomain-NG]
exten => s,1,ResetCDR(v)
 same => n,Dial(SIP/${ARG1}@gateway_${NGGW},40,TrU(VoIPDomain-completed))
 same => n,HangUp()

; Extend CDR data
exten => h,1,Set(CDR(server)=${SERVER})
 same => n,Set(CDR(codec)=${CHANNEL(audionativeformat)})
 same => n,Set(CDR(QOSa)=${RTPAUDIOQOS})
 same => n,Set(CDR(QOSb)=${RTPAUDIOQOSBRIDGED})
 same => n,Set(CDR(SIPID)=${SIPCALLID})
 same => n,Set(CDR(gateway)=${NGGW})
 same => n,Set(CDR(value)=0)
 same => n,Set(CDR(processed)=1)

;;
;; Call from a blocked number
;;
;; ARG1: Destination extension
;;
[macro-Blocked]
exten => s,1,Set(CDR(userfield)=block)
 same => n,Ringing()
 same => n,Wait(${DIALTIME})
 same => n,Voicemail(${ARG1},u)
 same => n,HangUp()

;;
;; Dial network ranges
;;
;; ARG1: Destination extension
;;
[macro-DialRange]
exten => s,1,NoOp(Searching if range exist to extension ${ARG1})
#include voipdomain/configs/range-*.conf

;;
;; Queue dial
;;
;; ARG1: Queue ID
;;
[macro-Queue]
exten => s,1,NoOp(Linking call to queue ${ARG1})
 same => n,Set(CDR(userfield)=queue)
 same => n,Queue(queue_${ARG1},ti)
 same => n,HangUp()

;;
;; Not a macro, but's here because it's a global and key context to VoIP Domain
;; system. This context is executed everytime a call is completed in the system.
;; It check if need to monitor (record) the call, set volume and set other CDR
;; variables needed, like if it's a transhipment answer, a central answer and other tasks.
;;
[VoIPDomain-completed]
exten => s,1,Macro(PeerVar,monitor,${CALLERID(num)},monitor)
 same => n,ExecIf($["${monitor}" = "yes"]?Set(monfile=${STRFTIME(${EPOCH},GMT+3,%Y%m%d%H%M%S)}-${MASTER_CHANNEL(CALLERID(num))}-${MASTER_CHANNEL(CALLERID(dnid))}-${MASTER_CHANNEL(UNIQUEID)}))
 same => n,Macro(PeerVar,monitor,${MASTER_CHANNEL(CALLERID(num))},monitor)
 same => n,ExecIf($["${monitor}" = "yes"]?Set(monfile=${STRFTIME(${EPOCH},GMT+3,%Y%m%d%H%M%S)}-${MASTER_CHANNEL(CALLERID(num))}-${MASTER_CHANNEL(CALLERID(dnid))}-${MASTER_CHANNEL(UNIQUEID)}))
 same => n,Macro(PeerVar,monitor,${MASTER_CHANNEL(CALLERID(dnid))},monitor)
 same => n,ExecIf($["${monitor}" = "yes"]?Set(monfile=${STRFTIME(${EPOCH},GMT+3,%Y%m%d%H%M%S)}-${MASTER_CHANNEL(CALLERID(num))}-${MASTER_CHANNEL(CALLERID(dnid))}-${MASTER_CHANNEL(UNIQUEID)}))
 same => n,ExecIf($["${monfile}" != ""]?MixMonitor(${monfile}.wav,b))
 same => n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
 same => n,Set(MASTER_CHANNEL(CDR(monitor))=${monfile})

; If channel volume variables exists, set RX and TX volumes
 same => n,Macro(PeerVar,voltx,${CALLERID(num)},voltx)
 same => n,Macro(PeerVar,volrx,${CALLERID(num)},volrx)
 same => n,ExecIf($["${voltx}" != ""]?Set(VOLUME(tx)=${voltx}))
 same => n,ExecIf($["${volrx}" != ""]?Set(VOLUME(rx)=${volrx}))

; Return if it's a normal call, otherwhise process call type
 same => n,GoToIf($["${MASTER_CHANNEL(CDR(userfield))}" = "central"]?central)
 same => n,GoToIf($["${CALLERID(dnid):0:2}" = "*8"]?capture)
 same => n,GoToIf($["${CDR(dcontext)}" = "VoIPDomain-transhipment"]?transhipment)
 same => n,Return()

; If it's a central call answer, register who answered at record
 same => n(central),Set(MASTER_CHANNEL(CDR(userfieldextra))=${CALLERID(num)})
 same => n,Set(MASTER_CHANNEL(CDR(calltype))=1)
 same => n,Return()

; If transhiped and answered by other extension, register who answered at master record and don't create another one
 same => n(transhipment),Set(MASTER_CHANNEL(CDR(userfield))=transhipment)
 same => n,Set(MASTER_CHANNEL(CDR(userfieldextra))=${CALLERID(num)})
 same => n,Set(MASTER_CHANNEL(CDR(calltype))=1)
 same => n,Return()

; If it's a capture, register who answered the call
 same => n(capture),Set(MASTER_CHANNEL(CDR(userfield))=capture)
 same => n,Set(MASTER_CHANNEL(CDR(userfieldextra))=${CALLERID(num)})
 same => n,Set(MASTER_CHANNEL(CDR(calltype))=1)
 same => n,Return()
