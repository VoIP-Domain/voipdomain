    ___ ___       ___ _______     ______                        __
   |   Y   .-----|   |   _   |   |   _  \ .-----.--------.---.-|__.-----.
   |.  |   |  _  |.  |.  1   |   |.  |   \|  _  |        |  _  |  |     |
   |.  |   |_____|.  |.  ____|   |.  |    |_____|__|__|__|___._|__|__|__|
   |:  1   |     |:  |:  |       |:  1    /
    \:.. ./      |::.|::.|       |::.. . /
     `---'       `---`---'       `------'

 Copyright (C) 2016-2025 Ernani Jos√© Camargo Azevedo

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.

                           INSTALL HOW-TO
                         --==============--

The VoIP Domain system need a series of requirements to work. The developer of
this software uses RHEL as main Linux system to all the servers (or the server,
if you want to run everything togheter).

The requirements to the main administration interface will be:

* NGiNX server (http://nginx.org/)
* MariaDB server (https://mariadb.org/)
* PHP (at least version 5.5.0) with PHP-FPM support
  (https://www.php.net/manual/en/install.fpm.php) and the following modules:
  - PDO
  - SimpleXML
  - curl
  - date
  - dom
  - ereg
  - exif
  - fileinfo
  - gd
  - gearman (https://www.php.net/manual/en/book.gearman.php)
  - gettext
  - hash
  - iconv
  - imagick
  - json
  - libxml
  - mbstring
  - mysql
  - mysqli
  - openssl
  - pcntl
  - pcre
  - session
  - sockets
  - standard
  - xml
  - zip
* PHP Gearman PECL module (https://pecl.php.net/package/gearman)

You can run the administrative interface on a small Virtual Machine or low-cost
server. The administrative interface doesn't need to be active 100% of the time,
as Asterisk servers managed by the system doesn't depend on the administrative
interface to work. Any offline data (such as billing, LCR, etc) can be done
locally on the Asterisk servers and therefore sent to the administrative
interface.

The administrative interface will be used to configure your telephony environment
and provide usage reports.

To configure PHP-FPM and NGiNX, you can refer to the examples in the docs
directory.

The requirements to the control daemons will be:

* PHP (at least version 5.5.0) with cli and the following modules:
  - SimpleXML
  - curl
  - date
  - dom
  - ereg
  - gearman (https://www.php.net/manual/en/book.gearman.php)
  - gettext
  - hash
  - json
  - mbstring
  - mysql
  - mysqli
  - openssl
  - pcntl
  - pcre
  - posix
  - proctitle (https://www.php.net/manual/en/book.proctitle.php) (optional)
  - sockets
  - standard
* PHP Gearman PECL module (https://pecl.php.net/package/gearman)

The control daemons will basically route the Asterisk events and administrative
interface events and generate notifications for external daemons. The monitor
daemon will connect to the Asterisk AMI interface and process the telephony
events sent by Gearman API to the router daemon. You'll need one monitor daemon
per Asterisk server and one router daemon for the entire system. You can run
these daemons wherever you want on your network, but it's recommended to run the
Asterisk monitor daemon on the same machine as your Asterisk server, to avoid
missing events in case of network problems. The router daemon can run on the same
server as the administrative interface.

The requirements to the Asterisk servers will be:

* Asterisk (at least version 20.0.0)
* MariaDB server (https://mariadb.org/)
* PHP (at least version 5.5.0) with cli and the following modules:
  - SimpleXML
  - curl
  - date
  - dom
  - ereg
  - gettext
  - hash
  - json
  - mbstring
  - mysql
  - mysqli
  - openssl
  - pcntl
  - pcre
  - posix
  - proctitle (https://www.php.net/manual/en/book.proctitle.php) (optional)
  - sockets
  - standard
* PHP Gearman PECL module (https://pecl.php.net/package/gearman)

MariaDB server is required to run with Asterisk for local storage of billing
entries. If communication with the administrative interface is interrupted, the
data will not be lost, it will resynchronize when the connection is restored. In
addition, some plugins need a database with local data to work (for example, the
Brazilian telecommunication agency standard, which needs a huge database to
determine the cost of the call). PHP is required to run the configuration daemon,
which will receive events from the administrative interface to change Asterisk
configurations and provide basic system intelligence such as LCR.

Once everything is installed, you'll need to create the main system database and
populate it with MariaDB install script found in docs/voipdomain.sqldump.

When starting the system, the default user will be "admin", with password
"admin".

To configure the system, you'll need to create a basic tree of objects, in the
following sequence:

1) Server
2) Gateway (you can create a dummy one if needed to test the system)
3) Profile
4) Cost center
5) Group
6) Range
7) Extension

Once all that work is done, you can make calls and generate reports in the
administrative interface.

Installing all-in-one server:
-----------------------------

If you're running all services in the same server, remember that php-fpm process
will run as user `nginx`, and the main server certificate
(`/etc/voipdomain/master-certificate.key`) will be owned by it. The `router`
daemon will need to read this file. Use `setfacl` to allow the `asterisk` user
(that runs `router` daemon) to read the file after installing the system:
```
# setfacl -m u:asterisk:rw- /etc/voipdomain/master-certificate.key
```

Installing Asterisk server:
---------------------------

The Asterisk server configuration is done including the VoIP Domain bootstrap
files for each required configuration file.

Just install a fresh new Asterisk server and include the lines below in each
configuration file:
- agents.conf:
  #include voipdomain/bootstrap/agents.conf
- extensions.conf:
  #include voipdomain/bootstrap/dialplan.conf
- musiconhold.conf:
  #include voipdomain/bootstrap/musiconhold.conf
- pjsip.conf:
  #include voipdomain/bootstrap/pjsip.conf
- pjsip_notify.conf:
  #include voipdomain/bootstrap/pjsip_notify.conf
- queues.conf:
  #include voipdomain/bootstrap/queues.conf
- voicemail.conf:
  #include voipdomain/bootstrap/voicemail.conf

You can also execute the "configure-asterisk.sh" script available in the
/etc/asterisk/voipdomain/ directory to do this job.
